package net.reyemxela.warpsigns;

import net.minecraft.registry.RegistryKey;
import net.minecraft.registry.RegistryKeys;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.util.Identifier;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;

import java.util.Arrays;

/**
 * Represents a set of coordinates in a world.
 * Extends the BlockPos class.
 */
public class Coords extends BlockPos {
    private final ServerWorld world;

    /**
     * Creates a new instance of the Coords class with the given coordinates and world.
     *
     * @param x     The x-coordinate of the location.
     * @param y     The y-coordinate of the location.
     * @param z     The z-coordinate of the location.
     * @param world The world in which the location exists.
     */
    public Coords(final int x, final int y, final int z, final ServerWorld world) {
        super(x, y, z);
        this.world = world;
    }

    /**
     * Creates a new instance of the Coords class with the coordinates and world from the given Coords object.
     *
     * @param coords The Coords object from which to copy the coordinates and world.
     */
    public Coords(final Coords coords) {
        this(coords.getX(), coords.getY(), coords.getZ(), coords.getWorld());
    }

    /**
     * Creates a new instance of the Coords class with the coordinates and world parsed from the given string representation.
     *
     * @param coords A string representation of the coordinates in the format "x,y,z/world".
     */
    public Coords(final String coords) {
        super(0, 0, 0);
        final String[] splitString = coords.split("/");
        int[] splitCoords = Arrays.stream(splitString[0].split(",")).mapToInt(Integer::parseInt).toArray();
        setX(splitCoords[0]);
        setY(splitCoords[1]);
        setZ(splitCoords[2]);
        this.world = strToWorld(splitString[1]);
    }

    /**
     * Returns the ServerWorld object associated with these coordinates.
     *
     * @return The ServerWorld object associated with these coordinates.
     */
    public ServerWorld getWorld() {
        return world;
    }

    /**
     * Returns a formatted string representation of the coordinates.
     * <p>
     * The format of the string is "x,y,z" where x, y, and z are the values
     * returned by the getX(), getY(), and getZ() methods respectively.
     *
     * @return a formatted string representation of the coordinates.
     */
    public String getStr() {
        return String.format("%d,%d,%d", getX(), getY(), getZ());
    }

    /**
     * Returns a string representation of the key.
     * <p>
     * The key is generated by concatenating the formatted string representation
     * of the coordinates returned by the getStr() method with a forward slash
     * ("/") and the string representation of the world returned by the worldToStr() method.
     *
     * @return a string representation of the key.
     */
    public String getKey() {
        return getStr() + "/" + worldToStr();
    }

    public Coords offset(final Direction direction, final int i) {
        return i == 0
                ? this
                : new Coords(
                this.getX() + direction.getOffsetX() * i,
                this.getY() + direction.getOffsetY() * i,
                this.getZ() + direction.getOffsetZ() * i,
                this.getWorld()
        );
    }

    private String worldToStr() {
        return world.getDimensionKey().getValue().toString();
    }

    private static ServerWorld strToWorld(final String world) {
        return WarpSigns.serverInstance.getWorld(RegistryKey.of(RegistryKeys.WORLD, Identifier.tryParse(world)));
    }
}
